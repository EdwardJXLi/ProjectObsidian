import enum
import struct

# from obsidian.network import *
# from obsidian.constants import *
from obsidian.log import Logger


# Enums
class PacketDirections(enum.Enum):
    REQUEST = 0
    RESPONSE = 1


# Packet Skeleton
class Packet:
    ID: int = None           # Packet Id
    FORMAT: str = None       # Packet Structure Format
    SIZE: int = None         # Autogenerated Size Value
    CIRTICAL: bool = None    # Packet Criticality. Dictates What Event Should Occur When Error
    MODULE: str = None       # Packet Module Owner

    @classmethod
    def _init(cls):
        cls.SIZE = struct.calcsize(cls.FORMAT)


class RequestPacket(Packet):
    DIRECTION = PacketDirections.REQUEST  # Network Direction (Response or Response)
    PLAYERLOOP: bool = None               # Accept Packet During Player Loop

    @classmethod
    def deserialize(cls, *args, **kwargs):
        return None

    @classmethod
    def postDeserialization(cls):
        pass


# Packet Skeletons
class ResponsePacket(Packet):
    DIRECTION = PacketDirections.RESPONSE    # Network Direction (Response or Response)

    @classmethod
    def serialize(cls, *args, **kwargs):
        return None

    @classmethod
    def postSterilization(cls):
        pass


# Request Network Packets
class TestPacket(RequestPacket):
    DIRECTION = PacketDirections.REQUEST
    ID = 0x61
    FORMAT = "B5s"
    CIRTICAL = True
    PLAYERLOOP = False
    MODULE = "Test"

    @classmethod
    def deserialize(cls, rawData):
        _, msg = struct.unpack(cls.FORMAT, rawData)
        print(msg)
        return None

    @classmethod
    def postDeserialization(cls):
        Logger.debug("POST-DES")


# Response Network Packets
class TestReturnPacket(ResponsePacket):
    DIRECTION = PacketDirections.RESPONSE
    ID = 0x61
    FORMAT = "B5s"
    SIZE = 14
    CIRTICAL = True
    MODULE = "Test"

    @classmethod
    def serialize(cls):
        msg = bytes("ahello_there!\n", "ascii")
        print(msg)
        return msg

    @classmethod
    def postSterilization(cls):
        Logger.debug("POST-SER")


def registerCoreModules(manager):  # manager accepts any class that supports the registerInit and registerPacket function
    # Run Register Initialization
    manager.registerInit("Test")

    # Register Downsteam Packets
    manager.registerPacket(TestPacket)

    # Register Response Packets
    manager.registerPacket(TestReturnPacket)
